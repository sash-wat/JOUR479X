```{r}
suppressMessages(library(tidyverse))
```


Questions from ELMS:

Does that data already exist? Can you get it?

The data already exists, and I've added it to the "TransferMarkt Data" Folder in my presentations folder.
```{r}
clubs <- read_csv("~/Desktop/TransferMarkt Data/clubs.csv")
players <- read_csv("~/Desktop/TransferMarkt Data/players.csv")
player_valuations<- read_csv("~/Desktop/TransferMarkt Data/player_valuations.csv")
games <- read_csv("~/Desktop/TransferMarkt Data/games.csv")
game_events <- read_csv("~/Desktop/TransferMarkt Data/game_events.csv")
comps <- read_csv("~/Desktop/TransferMarkt Data/competitions.csv")
club_games <- read_csv("~/Desktop/TransferMarkt Data/club_games.csv")
appearances <- read_csv("~/Desktop/TransferMarkt Data/appearances.csv")

head(game_events)
```
```{r}
club_games
```


Do you need assistance in getting it?
Nope! It's all easy to 


What time frame do you want/need data from?
The data I have goes back to the 2012-13 season and spans a wide range of leagues, so this amount of data is more than enough.

Will you have to improve or augment the data in order to answer your question? If so, how?
Yes, and a lot. It's structured as a relation DB, so there will need to be a lot of joins and zips to compress player stats. I'm planning on looking at discussions and posted
code on Kaggle to see if there's anything that will speed up my analysis process

Are there other examples of this kind of work (specific or general)? If so, provide them.

https://www.kaggle.com/code/luisgasparcordeiro/market-value-eda -> some inspiration from this, but it's nowhere near the depth I want to get to
https://www.kaggle.com/code/luisgasparcordeiro/player-stats-by-season -> python code to aggregate stats. using this, I did some googling and figured out how to translate
the python code that user luisgasparcordeiro made into R, which can be seen below.


```{r}
player_stats <-function(name, year) {

df <- merge(appearances, games, by="game_id", all.x=TRUE)

df$goals_for <- ifelse(df$home_club_id == df$player_club_id, df$home_club_goals,
                           ifelse(df$away_club_id == df$player_club_id, df$away_club_goals, NA))

df$goals_against <- ifelse(df$home_club_id == df$player_club_id, df$away_club_goals,
                               ifelse(df$away_club_id == df$player_club_id, df$home_club_goals, NA))
    df$clean_sheet <- ifelse(df$goals_against == 0, 1,
                            ifelse(df$goals_against > 0, 0, NA))
    

if (year == "all") {
  df <- df |> group_by(player_id, player_name, season) |> 
  summarise(
    g = sum(goals),
    a = sum(assists),
    cs = sum(clean_sheet),
  ) |> filter(player_name == name)
}
else {
  df <- df |> group_by(player_id, player_name, season) |> 
  summarise(
    g = sum(goals),
    a = sum(assists),
    cs = sum(clean_sheet),
  ) |> filter(player_name == name) |> filter(season == year)
}

df

}
 

```
```{r}
messi <- player_stats("Lionel Messi", "all")
#messivals <- merge(messi, player_valuations, by="player_id", all.x = TRUE)
messisvalue <- player_valuations |> filter(player_id == 28003)
library(ggplot2)
ggplot(messisvalue, aes(x=messisvalue$datetime, y=messisvalue$market_value_in_eur)) +
  geom_line()
```
```{r}
cr7value <- player_valuations |> filter(player_id == 8198)
library(ggplot2)
ggplot(cr7value, aes(x=cr7value$datetime, y=cr7value$market_value_in_eur)) +
  geom_line()
```


```{r}
ggplot(messi, aes(x=messi$season, y=(messi$g +messi$a) )) +
  geom_line()
```



```{r}
cr7 <- player_stats('Cristiano Ronaldo', "all")
cr7
```


```{r}
ggplot() +
  geom_line(data = cr7, aes(x=cr7$season, y=(cr7$g +cr7$a)), color="red") +
  geom_point() +
  geom_line(data=messi, aes(x=messi$season, y=(messi$g +messi$a) ), color="lightblue") +
  xlab("Season") +
  ylab("G + A")
```

```{r}
nb <- player_stats('Nicolò Barella', "all")
nb
```

```{r}
#Marc-Andre ter Stegen is a German goalkeeper who plays for FC Barcelona, 
#so I wanted to see what his clean sheets stat looked like over time.
# His name also contains special characters and a hypen, so this is
# something I'll have to take note of. I can only presume this will continue
# to be the case for players like Danish centerback Simon Kjae(æ)r 
mats<- player_stats('Marc-André ter Stegen', "all")
mats
```


Some notes on my data now that I've handled some special cases/done an introductory
exploration:

1. Player names need to be specific to a fairly strong degree. As noted above,
players like Marc-André ter Stegen follow a very specific naming format, and
if you don't follow this, it'll break any sort of database parse you run. This
is probably going to be a hassle for names of players who come from nations where
English is not the first or predominant language, like Barella, an Italian midfielder
who players for Inter Milan

2. The dataset is MASSIVE. Going by the R environment outputs, the appearances dataframe
has over 1 MILLION rows, so parsing through this is going to require some clever joining
with other tables, like I've done in my player_stats function.

3. Another somewhat difficult problem: Every player has a unique set of valuations, and
as a result, there isn't a set number or pattern to how valuations are put out. To fix this
for the purposes of my investigation, I need to get 2 valuations per player per year, using
the following logic/methodology:
  - Seasons run from August to May, with Transfer windows running from June-August and December to January. For the June Valuation, I need to take into account the player's statistics for the previous season, and some how pair those statistics to the June transfer window FOLLOWING the season that they achieved those statistics. I'm a bit unsure as to how to model the winter transfer window valuations, and as such, might drop them since the valuations there can be a bit wonky and reliant on summer valuations. This is all a long winded way of saying I'm going to need to find a way to eliminate valuations not in June/July/August, but then also tie them to a PREVIOUS season's statistics. Still working through the R implementation of that, but the logic and thought process is there.
  
4. The data starts in the 2012-13 season, and runs through the 2022-23 season, with some**** data for the 2023-24 season. The data is scraped from Transfermarkt every week or so, but my data is obviously now static, and I felt 10 years of data was enough to work with. There will be some entries for the 23-24 season, but it shouldn't cause too much of an issue.

```{r}
temp <- player_valuations |> 
  filter(player_id == 8198) |> filter(format(date, "%m") == "05" | format(date, "%m") == "06" | format(date, "%m") == "07" | format(date, "%m") == "08") |> 
  arrange(date)

temp <- temp |>
  mutate(year = lubridate::year(date)) |>  # Create a new column with the year
  group_by(year) |>
  filter(date == max(date)) |>
  select(-year)
temp
```

```{r}
ggplot() +
  geom_line(data = temp, aes(x=temp$date, y=temp$market_value_in_eur), color="red")
```
This graph is way more smoothed out and looks like what I'm aiming for. A rise with a peak and a drop off, and this comes from only taking 1 date per year spanning from May to August, when leagues are typically in their off season. Most leagues end in mid-May, and end in mid-August, which is why I chose this acceptable range of values.


```{r}
temp |>
  mutate(year = lubridate::year(date)) |>  # Create a new column with the year
  group_by(year) |>
  filter(date == max(date))

temp
```
```{r}
t <- list()
u <- list()

for (row1 in 1:nrow(cr7)) {
  for (row2 in 1:nrow(temp)) {
    if (temp[row2, "year"] == cr7[row1, "season"] + 1) {
      t <- append(t, cr7[row1, "g"])
      u <- append(u, temp[row2, "market_value_in_eur"])
    }
  }
  
}

df <- data.frame(goals = unlist(t), value=unlist(u))

ggplot() +
  geom_point(data = df, aes(x=goals, y=value), color="red")
```

So here I have successfully shown, for one case, how to extract goals and values for a player, then link them such that for a season n, the value can in the future be represented as a function of the goals (and other numerical statistics) in season n-1. For the final step, I will convert this one-off analysis into a function, then perform a multiple regression using goals, assists, clean sheets, and perhaps appearances by position.

I'm going by position since I suspect goalies will have a much higher R^2 in clean sheets than in assists or goals, but perhaps midfielders and attackers can be better predicted by a combination of stats